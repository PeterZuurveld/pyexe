environment:
  matrix:
    - PYTHON: "C:\\Python27"
      OUTPUT: "py27.exe"
    - PYTHON: "C:\\Python27-x64"
      OUTPUT: "py27-64.exe"
    - PYTHON: "C:\\Python35"
      OUTPUT: "py35.exe"
    - PYTHON: "C:\\Python35-x64"
      OUTPUT: "py35-64.exe"
    - PYTHON: "C:\\Python36"
      OUTPUT: "py36.exe"
    - PYTHON: "C:\\Python36-x64"
      OUTPUT: "py36-64.exe"

init:
  - SET PROJDIR=%cd%
  - SET ORIGPATH=%PATH%
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - python -m pip install --upgrade pip
  - python -m pip install --upgrade setuptools
  - python -m pip install pywin32 psutil six setuptools
  - python -m pip install pyinstaller
  # Remvoe the site module hook from PyInstaller; we need the site module as is
  - "del /q %PYTHON%\\Lib\\site-packages\\PyInstaller\\hooks\\pre_find_module_path\\hook-site.*"
  - "del /q /s %PYTHON%\\Lib\\site-packages\\PyInstaller\\hooks\\pre_find_module_path\\__pycache__"
  - mkdir c:\u
  - cd c:\u
  - curl -L -O "https://github.com/upx/upx/releases/download/v3.94/upx394w.zip"
  - unzip upx394w.zip
  - cd %PROJDIR%

build_script:
  # Copy a build hook to PyInstaller to include the cacerts.pem file for pip.
  - "copy hooks\\hook*.* %PYTHON%\\Lib\\site-packages\\PyInstaller\\hooks\\."
  # Replace the multiprocessing loader hook
  - "copy hooks\\pyi_rth*.* %PYTHON%\\Lib\\site-packages\\PyInstaller\\loader\\rthooks\\."
  # Replace the stage 3 importer
  - "copy hooks\\pyimod03_importers.py %PYTHON%\\Lib\\site-packages\\PyInstaller\\loader\\."
  - python modules_pyexe.py pyexe.py
  # Save the artifact immediately
  - appveyor PushArtifact pyexe.py
  - python -m PyInstaller --onefile pyexe.py --upx-dir C:\\u\\upx394w\\upx.exe --exclude-module FixTk --exclude-module tcl --exclude-module tk --exclude-module _tkinter --exclude-module tkinter --exclude-module Tkinter --runtime-hook hooks\\rth_subprocess.py
  - cp dist\pyexe.exe %OUTPUT%
  # Save the artifact immediately
  - appveyor PushArtifact %OUTPUT%

test_script:
  # Sometimes we send test data to this directory
  - mkdir c:\temp
  - SET PATH=%ORIGPATH%
  - pip install pytest
  - cd tests
  # Build a zipapp for our tests; it doesn't exist before 3.5, our we could use
  # our own executable to do it.
  - C:\Python36-x64\python -m zipapp --output ..\sample_zipapp.pyz -p "/usr/bin/env python" sample_zipapp
  # Make sure we only have original files here.
  - git clean -fxd .
  - "python -m pytest -l --cache-clear --exe=..\\%OUTPUT%"
  # We can test the tests against the master python.  We have to exclude a few
  # tests that only work on the stand-alone build.
  # Make sure we only have original files here.
  - git clean -fxd .
  - 'python -m pytest -l --cache-clear --exe=%PYTHON%\python -m "not pyexe"'

deploy:
  - provider: GitHub
    tag: 'pyexe-latest'
    release: 'Release pyexe-latest'
    auth_token:
      secure: PGsGUDU6oqIy7zCyTMwIWlzf4TbJtuIgqmWb9ZLqNlM13AAaxWfDlzDlG+0CyHFx
    artifact: "%OUTPUT%"
    force_update: true
    on:
      branch: master

  - provider: GitHub
    tag: $(appveyor_repo_tag_name)
    release: Release $(appveyor_repo_tag_name)
    auth_token:
      secure: PGsGUDU6oqIy7zCyTMwIWlzf4TbJtuIgqmWb9ZLqNlM13AAaxWfDlzDlG+0CyHFx
    artifact: "%OUTPUT%"
    force_update: true
    on:
      appveyor_repo_tag: true
